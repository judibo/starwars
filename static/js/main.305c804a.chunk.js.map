{"version":3,"sources":["components/PlanetaDetalhe.js","App.js","serviceWorker.js","index.js"],"names":["PlanetaDetalhe","_ref","nFilms","name","population","climate","terrain","id","handleIdChange","react_default","a","createElement","className","data-id","onClick","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","Math","floor","random","preventDefault","fetch","concat","then","response","json","setState","currentPlanet","state","_this2","planet","films","length","alt","src","style","width","padding","src_components_PlanetaDetalhe","assign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAkBeA,eAfQ,SAAAC,GAAsE,IAApEC,EAAoED,EAApEC,OAAQC,EAA4DF,EAA5DE,KAAMC,EAAsDH,EAAtDG,WAAYC,EAA0CJ,EAA1CI,QAASC,EAAiCL,EAAjCK,QAASC,EAAwBN,EAAxBM,GAAIC,EAAoBP,EAApBO,eACvE,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeT,GAC7BM,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,2BAAH,IAA6BP,GAC7BK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,IAA0BN,GAC1BI,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,IAA0BL,GAC1BG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,4BAAH,IAA8BT,EAA9B,YAEFO,EAAAC,EAAAC,cAAA,UAAQE,UAASN,EAAIO,QAASN,EAAgBI,UAAU,cAAxD,WC0CSG,cAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRR,eAAiB,SAACgB,GAChB,IAAIjB,EAAKkB,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC3CH,EAAEI,iBACFC,MAAK,gCAAAC,OAAiCvB,IACrCwB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIhB,EAAKiB,SAAS,CAC1BC,cAAeF,EACf1B,GAAIA,OAdNU,EAAKmB,MAAQ,CACXD,cAAe,KACf5B,GAAIkB,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACtCzB,OAAQ,MALOe,mFAoBC,IAAAoB,EAAAjB,KAClBS,MAAK,gCAAAC,OAAiCV,KAAKgB,MAAM7B,KAChDwB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAII,EAAKH,SAAS,CAC1BC,cAAeF,uCAKjB,IAAIK,EAASlB,KAAKgB,MAAMD,cAIxB,OAHIG,IACFlB,KAAKgB,MAAMlC,OAASoC,EAAOC,MAAMC,QAGjC/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAK8B,IAAI,iBAAiBC,IAAI,gEAAgEC,MAAO,CAACC,MAAO,IAAKC,QAAS,OAE7HpC,EAAAC,EAAAC,cAACmC,EAAD5B,OAAA6B,OAAA,GAAoB3B,KAAKgB,MAAMD,cAA/B,CACgBjC,OAAUkB,KAAKgB,MAAMlC,OACrBM,eAAgBY,KAAKZ,kBACrCC,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,oCACAH,EAAAC,EAAAC,cAAA,qCA5CQqC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.305c804a.chunk.js","sourcesContent":["import React from 'react';\nimport './PlanetaDetalhe.css'\n\nconst PlanetaDetalhe = ({nFilms, name, population, climate, terrain, id, handleIdChange}) => {\n  return (\n    <section>\n      <div className=\"PlanetaDetalhe\">\n        <h1 className=\"PlanetaNome\">{name}</h1>\n        <p><span>Population:</span> {population}</p>\n        <p><span>Climate:</span> {climate}</p>\n        <p><span>Terrain:</span> {terrain}</p>\n        <p><span>Featured In:</span> {nFilms} movies</p>\n      </div>\n      <button data-id={id} onClick={handleIdChange} className=\"BtnPlaneta\">NEXT</button>\n    </section>\n  )\n};\n\nexport default PlanetaDetalhe;","import React, { Component } from 'react';\nimport './App.css';\nimport PlanetaDetalhe from './components/PlanetaDetalhe';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPlanet: null,\n      id: Math.floor((Math.random() * 61) + 1),\n      nFilms: null\n    };\n  }\n\n  handleIdChange = (e) => {\n    var id = Math.floor((Math.random() * 61) + 1)\n    e.preventDefault()\n    fetch(`https://swapi.co/api/planets/${id}`)\n    .then(response => response.json())\n    .then(json => this.setState({\n      currentPlanet: json,\n      id: id,\n    }))\n  } \n  \n  componentDidMount() {\n    fetch(`https://swapi.co/api/planets/${this.state.id}`)\n    .then(response => response.json())\n    .then(json => this.setState({\n      currentPlanet: json\n    }));\n  }\n\n  render() {\n    let planet = this.state.currentPlanet;\n    if (planet) { \n      this.state.nFilms = planet.films.length;\n      }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img alt=\"Star Wars Logo\" src=\"https://www.freeiconspng.com/uploads/logo-star-wars-png-4.png\" style={{width: 190, padding: 20}}/>\n        </header>\n        <PlanetaDetalhe {...this.state.currentPlanet}\n                        nFilms = {this.state.nFilms}\n                        handleIdChange={this.handleIdChange}/>\n        <section className=\"footer\">\n          <p className=\"quote\">Together we can rule the galaxy!</p>\n          <p>- Darth Vader -</p>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}